{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension/./src/background/background.js"],"sourcesContent":["const OFFSCREEN_DOCUMENT_PATH = 'offscreen.html';\nconst FIREBASE_HOSTING_URL = 'https://sharptabs.com/extension-auth'; // Replace with your Firebase hosting URL\n\nlet creatingOffscreenDocument;\n\nasync function hasOffscreenDocument() {\n    const matchedClients = await clients.matchAll();\n    return matchedClients.some((client) => client.url.endsWith(OFFSCREEN_DOCUMENT_PATH));\n}\n\nasync function setupOffscreenDocument() {\n    if (await hasOffscreenDocument()) return;\n\n    if (creatingOffscreenDocument) {\n        await creatingOffscreenDocument;\n    } else {\n        debugger\n        creatingOffscreenDocument = chrome.offscreen.createDocument({\n            url: OFFSCREEN_DOCUMENT_PATH,\n            reasons: [chrome.offscreen.Reason.DOM_SCRAPING],\n            justification: 'Firebase Authentication'\n        });\n        await creatingOffscreenDocument;\n        creatingOffscreenDocument = null;\n    }\n}\n\nasync function getAuthFromOffscreen() {\n    await setupOffscreenDocument();\n    return new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage({action: 'getAuth', target: 'offscreen'}, (response) => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n            } else {\n                resolve(response);\n            }\n        });\n    });\n}\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'signIn') {\n        getAuthFromOffscreen()\n            .then(user => {\n                chrome.storage.local.set({user: user}, () => {\n                    sendResponse({user: user});\n                });\n            })\n            .catch(error => {\n                console.error('Authentication error:', error);\n                sendResponse({error: error.message});\n            });\n        return true; // Indicates we will send a response asynchronously\n    } else if (message.action === 'signOut') {\n        chrome.storage.local.remove('user', () => {\n            sendResponse();\n        });\n        return true;\n    }\n});\n"],"names":[],"sourceRoot":""}